
{% macro import() -%}    
import java.io.*;
import java.util.*;
{%- if db_family == "nosql" %}
import oracle.nosql.driver.*;
import oracle.nosql.driver.iam.*;
import oracle.nosql.driver.ops.*;
import oracle.nosql.driver.values.*;
{%- elif db_family == "opensearch" %}
import java.net.*;
import java.util.stream.*;
import javax.json.*;
{%- endif %}       
{%- endmacro -%}   

{% macro dependencies() -%}
{%- if db_family == "nosql" %}  
      <dependency>
        <groupId>com.oracle.nosql.sdk</groupId>
        <artifactId>nosqldriver</artifactId>
        <version>5.4.14</version>
      </dependency>
{%- elif db_family_type == "sql" %}  
      <dependency>
        <groupId>{{ pomGroupId }}</groupId>
        <artifactId>{{ pomArtifactId }}</artifactId>
        {%- if java_framework != "springboot" or deploy_type == "function" %}
        <version>{{ pomVersion }}</version>
        {%- endif %}
      </dependency>  
{%- endif %}
      <dependency>
        <groupId>org.glassfish</groupId>
        <artifactId>javax.json</artifactId>
        <version>1.1.4</version>
      </dependency>   
{%- endmacro -%}  

{% macro dept() -%}
   {%- if db_family != "sql" %}
        {{ dept_no_return() }}
        return rows; 
   {%- endif %}
{%- endmacro -%}

{% macro dept_string() -%}
        String json = "-";
        try {
            {%- if db_family_type == "sql" %}        
            Class.forName("{{ jdbcDriverClassName }}");    
            {%- endif %}        
            {{ dept_no_return() }}
            // Jackson 
            ObjectMapper objectMapper = new ObjectMapper();
            json = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(rows);
        } catch (Exception e) {
            System.err.println("Exception:" + e.getMessage());
            e.printStackTrace();
        }     
{%- endmacro -%}


{% macro dept_no_return() -%}
        List<Dept> rows = new ArrayList<Dept>();
        {%- if db_family_type == "sql" %}
        {{ sql() }}        
        {%- elif db_family == "none" %}
        {{ nodb() }}
        {%- elif db_family == "opensearch" %}
        {{ opensearch() }}
        {%- elif db_family == "nosql" %}
        {{ nosql() }}
        {%- endif %}
{%- endmacro -%}

{% macro sql() -%} 
        try {
            Connection conn = DriverManager.getConnection( System.getenv("JDBC_URL") , System.getenv("DB_USER"), System.getenv("DB_PASSWORD"));
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT deptno, dname, loc FROM dept");
            while (rs.next()) {
                rows.add(new Dept(rs.getInt(1), rs.getString(2), rs.getString(3) ));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
{%- endmacro -%}  

{% macro nodb() -%}    
        rows.add(new Dept(10, "ACCOUNTING", "Seoul" ));
        rows.add(new Dept(20, "RESEARCH", "Cape Town" ));
        rows.add(new Dept(30, "SALES", "Brussels"));
        rows.add(new Dept(40, "OPERATIONS", "San Francisco"));
{%- endmacro -%}   

{% macro opensearch() -%}    
        String s=System.getenv("JDBC_URL");
        String db_url=s.substring(s.indexOf("https://")+8,s.indexOf(":9200"));
        URL url = new URL("https://"+db_url+":9200/dept/_search?size=1000&scroll=1m&pretty=true");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
        String body = br.lines().collect(Collectors.joining());
        conn.disconnect();

        JsonObject jsonObject = Json.createReader(new StringReader(body)).readObject();
        JsonArray hitsArray = jsonObject.getJsonObject("hits").getJsonArray("hits");   
        for (JsonObject hit : hitsArray.getValuesAs(JsonObject.class)) {
            JsonObject source = hit.getJsonObject("_source");
            rows.add(new Dept(Integer.valueOf(source.getString("deptno")), source.getString("dname"), source.getString("loc") ));
        }
{%- endmacro -%}   

{% macro nosql() -%}    
        System.out.println( "TF_VAR_compartment_ocid=" + System.getenv("TF_VAR_compartment_ocid") );
        System.out.println( "TF_VAR_nosql_endpoint=" + System.getenv("TF_VAR_nosql_endpoint") );
        {%- if deploy_type in ["compute", "instance_pool"] %}
        SignatureProvider authProvider = SignatureProvider.createWithInstancePrincipal();
        {%- else %}
        SignatureProvider authProvider = SignatureProvider.createWithResourcePrincipal();
        {%- endif %}
        NoSQLHandleConfig config = new NoSQLHandleConfig( System.getenv("TF_VAR_nosql_endpoint"), authProvider); 
        config.setDefaultCompartment( System.getenv("TF_VAR_compartment_ocid") );
        NoSQLHandle handle = NoSQLHandleFactory.createNoSQLHandle(config); 

        QueryRequest queryRequest = new QueryRequest().setStatement("SELECT deptno, dname, loc FROM dept");
        QueryResult queryResult = handle.query(queryRequest);
        do {
          List<MapValue> results = queryResult.getResults();
          for (MapValue row : results) {
            rows.add( new Dept( row.get("deptno").asInteger().getValue(), row.get("dname").asString().getValue(), row.get("loc").asString().getValue() ) );
          }
        } while (!queryRequest.isDone());
{%- endmacro -%}   
